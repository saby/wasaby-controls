.controls-GridReact__minHeight-data {
   min-height: var(--cell_min-height_grid);
}

.controls-GridReact__cell {
   box-sizing: border-box;
   // Задаем min-width, чтобы ячейка обрезалась по ширине колонки.
   // http://css-live.ru/articles/chto-mozhet-polomat-maket-na-gridax-css-grid-layout.html
   min-width: 0;
}

.controls-GridReact__cell-baseline::before {
   content: '\200b';
   font-size: var(--baseline_list);
   width: 0;
}

.ws-is-hover
.controls-BaseControl_hover_enabled
.controls-ListView__itemV:hover
> {
   .controls-hover-background-list_default {
      background-color: var(--item_hover_background-color_list);
   }

   @variants: primary, secondary, danger, success, warning, unaccented, readonly,
   info;
   .for(@variants, {
      .controls-hover-background-@{_item} {
         background-color: ~'var(--@{_item}_hover_background-color)';
      }
   });

   // Ховер редактирования не полностью укладывается в классовую модель обычного
   // стилизованного ховера, т.к. он работает не от заховеренной строки,
   // а от заховеренной ячейки. В остальном различий нет.
   .controls-hover-background-list_singleCellEditable:hover {
      background-color: var(--item_hover_background-color_list);
   }

   .controls-hover-background-list_singleCellNotEditable:hover {
      background-color: var(--single-not-editable-cell_hover_background-color_grid);
   }
}

// region editArrow

.ws-is-hover .controls-BaseControl_showActions .controls-ListView__itemV:hover {
   // Если строка выделяется целиком, то и стрелка редактирования
   // появляется при ховере по всей строке
   @variants: list_default, transparent, primary, secondary, danger, success, warning, unaccented, readonly,
   info;
   .for(@variants, {
      .controls-hover-background-@{_item} .controls-Grid__editArrow-wrapper {
         visibility: visible;
         opacity: 1;
      }
   });
   // При поячеечном редактировании стрелка появляется только при ховере
   // на ячейку, в которой лежит стрелка.
   .controls-hover-background-list_singleCellEditable:hover,
   .controls-hover-background-list_singleCellNotEditable:hover {
      .controls-Grid__editArrow-wrapper {
         visibility: visible;
         opacity: 1;
      }
   }
}

.controls-Grid__editArrow_background_list_singleCellEditable,
.controls-Grid__editArrow_background_list_default {
   background-color: var(--item_hover_background-color_list);
}

.controls-Grid__editArrow-blur_list_singleCellEditable,
.controls-Grid__editArrow-blur_list_default {
   background: linear-gradient(90deg,
   rgba(240, 245, 251, 0),
   var(--item_hover_background-color_list));
}

.controls-Grid__editArrow_background_list_singleCellNotEditable {
   background-color: var(--single-not-editable-cell_hover_background-color_grid);
}

.controls-Grid__editArrow-blur_list_singleCellNotEditable {
   background: linear-gradient(90deg,
   rgba(240, 245, 251, 0),
   var(--single-not-editable-cell_hover_background-color_grid));
}

// endregion editArrow


// region cell separators

.controls-GridReact-cell_topSeparatorSize-s {
   border-top-style: solid;
   border-top-width: var(--item-separator_s_thickness_list);
   border-top-color: var(--item_separator_s_color_list);
}

.controls-GridReact-cell_topSeparatorSize-l {
   border-top-style: solid;
   border-top-width: var(--item-separator_l_thickness_list);
   border-top-color: var(--item_separator_l_color_list);
}

.controls-GridReact-cell_bottomSeparatorSize-s {
   border-bottom-style: solid;
   border-bottom-width: var(--item-separator_s_thickness_list);
   border-bottom-color: var(--item_separator_s_color_list);
}

.controls-GridReact-cell_bottomSeparatorSize-l {
   border-bottom-style: solid;
   border-bottom-width: var(--item-separator_l_thickness_list);
   border-bottom-color: var(--item_separator_l_color_list);
}

.controls-GridReact__row {
   &:first-of-type {
      .controls-GridReact-cell_topSeparatorSize-s {
         border-top-color: var(--item_edge_separator_s_color_list);
      }

      .controls-GridReact-cell_topSeparatorSize-l {
         border-top-color: var(--item_edge_separator_l_color_list);
      }
   }

   &:last-of-type {
      .controls-GridReact-cell_bottomSeparatorSize-s {
         border-bottom-color: var(--item_edge_separator_s_color_list);
      }

      .controls-GridReact-cell_bottomSeparatorSize-l {
         border-bottom-color: var(--item_edge_separator_l_color_list);
      }
   }
}

.controls-GridReact-cell_leftSeparatorSize-s {
   border-left-style: solid;
   border-left-width: var(--column_separator_s_thickness_grid);
   border-left-color: var(--column_separator_s_color_grid);
}

.controls-GridReact-cell_rightSeparatorSize-s {
   border-right-style: solid;
   border-right-width: var(--column_separator_s_thickness_grid);
   border-right-color: var(--column_separator_s_color_grid);
}

// endregion cell separators


// region Padding
// Приходится писать свои классы, т.к. в стандартной линейке нет таких размеров

// region VerticalPadding

.controls-padding_top-grid_s {
   padding-top: var(--item_padding-top_s_grid);

   &.controls-GridReact-cell_topSeparatorSize-s {
      padding-top: calc(var(--item_padding-top_s_grid) - var(--item-separator_s_thickness_list));
   }

   &.controls-GridReact-cell_topSeparatorSize-l {
      padding-top: calc(var(--item_padding-top_s_grid) - var(--item-separator_l_thickness_list));
   }
}

.controls-padding_top-grid_l {
   padding-top: var(--item_padding-top_l_grid);

   &.controls-GridReact-cell_topSeparatorSize-s {
      padding-top: calc(var(--item_padding-top_l_grid) - var(--item-separator_s_thickness_list));
   }

   &.controls-GridReact-cell_topSeparatorSize-l {
      padding-top: calc(var(--item_padding-top_l_grid) - var(--item-separator_l_thickness_list));
   }
}

.controls-padding_bottom-grid_s {
   padding-bottom: var(--item_padding-bottom_s_grid);

   &.controls-GridReact-cell_bottomSeparatorSize-s {
      padding-bottom: calc(var(--item_padding-bottom_s_grid) - var(--item-separator_s_thickness_list));
   }

   &.controls-GridReact-cell_bottomSeparatorSize-l {
      padding-bottom: calc(var(--item_padding-bottom_s_grid) - var(--item-separator_l_thickness_list));
   }
}

.controls-padding_bottom-grid_l {
   padding-bottom: var(--item_padding-bottom_l_grid);

   &.controls-GridReact-cell_bottomSeparatorSize-s {
      padding-bottom: calc(var(--item_padding-bottom_l_grid) - var(--item-separator_s_thickness_list));
   }

   &.controls-GridReact-cell_bottomSeparatorSize-l {
      padding-bottom: calc(var(--item_padding-bottom_l_grid) - var(--item-separator_l_thickness_list));
   }
}

// endregion VerticalPadding

// region HorizontalPadding

.controls-padding_left-grid_s {
   padding-left: var(--cell_padding-left_s_grid);
}

.controls-padding_left-grid_m {
   padding-left: var(--cell_padding-left_m_grid);
}

.controls-padding_right-grid_s {
   padding-right: var(--cell_padding-right_s_grid);
}

.controls-padding_right-grid_m {
   padding-right: var(--cell_padding-right_m_grid);
}

// endregion HorizontalPadding

// endregion Padding

/* region ItemActions display */

.controls-BaseControl_showActions_visible {
   .controls-itemActionsV {
      visibility: visible;
      opacity: 1;
   }
}

.ws-is-hover .controls-BaseControl_showActions_delayed {
   .controls-ListView__item_showActions:hover {
      .controls-itemActionsV_custom,
      > .controls-GridReact__cell > .controls-itemActionsV {
         /* stylelint-disable no-unknown-animations */
         animation: timeout 0.5s;
      }
   }
}

.ws-is-hover .controls-BaseControl_showActions_delayed,
.ws-is-hover .controls-BaseControl_showActions_onhover {
   .controls-ListView__item_showActions:hover {
      .controls-itemActionsV_custom,
      > .controls-GridReact__cell > .controls-itemActionsV {
         visibility: visible;
         opacity: 1;
      }
   }
}

/* endregion ItemActions display */

// region Shadows
// С помощью clip-path скрываем тень между ячейками https://codepen.io/stormkirill98/pen/xxaGpvY
.controls-GridReact__first-cell_shadow-mask::after {
   clip-path: polygon(calc(100% + var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)),
   calc(100% + var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)),
   calc(100% + var(--shadow-blur_b)) 0,
   100% 0,
   100% 100%,
   calc(100% + var(--shadow-blur_b)) 100%);
}

.controls-GridReact__last-cell_shadow-mask::after {
   clip-path: polygon(calc(100% + var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) 100%,
   0 100%,
   0 0,
   calc(-1 * var(--shadow-blur_b)) 0,
   calc(-1 * var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)),
   calc(100% + var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)));
}

.controls-GridReact__cell_shadow-mask::after {
   clip-path: polygon(calc(100% + var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) calc(100% + var(--shadow-blur_b)),
   calc(-1 * var(--shadow-blur_b)) 100%,
   0 100%,
   0 0,
   calc(-1 * var(--shadow-blur_b)) 0,
   calc(-1 * var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)),
   calc(100% + var(--shadow-blur_b)) calc(-1 * var(--shadow-blur_b)),
   calc(100% + var(--shadow-blur_b)) 0,
   100% 0,
   100% 100%,
   calc(100% + var(--shadow-blur_b)) 100%);
}

// endregion Shadows
