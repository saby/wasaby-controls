<ws:template name="COLUMN">
	<div if="{{ gridColumn.shouldDisplayMarker(marker) }}"
		 class="{{ gridColumn.getMarkerClasses(markerSize, itemPadding) }}"
		 attr:data-qa="marker"></div>

	<ws:partial template="{{ gridColumn.getTemplate() }}"
				scope="{{ gridColumn.config.templateOptions }}"
				attr:key="{{ gridColumn.getInstanceId() }}"
				itemContents="{{ (item || itemData).contents }}"
				column="{{ gridColumn }}"
				item="{{ item || itemData }}"
				itemData="{{ gridColumn }}"
				gridColumn="{{ gridColumn }}"
				colData="{{ gridColumn }}"
				theme="{{ theme }}"
				style="{{ style }}"
				cursor="{{ cursor }}"
				backgroundColorStyle="{{ backgroundColorStyle }}"
				backgroundStyle="{{ backgroundStyle }}"
				contrastBackground="{{ (item || itemData).isMultiSelectContrastBackground() }}"
				highlightOnHover="{{ highlightOnHover }}"
				itemActionsClass="{{ itemActionsClass }}"
				templateHighlightOnHover="{{ templateHighlightOnHover }}"
				hoverBackgroundStyle="{{ hoverBackgroundStyle }}"
				horizontalPadding="{{style === 'master' ? '3xs' : horizontalPadding}}"
				fontColorStyle="{{ fontColorStyle }}"
				fontSize="{{ fontSize }}"
				fontWeight="{{ fontWeight }}"
				tagTemplate="{{ gridColumn.TagCell ? tagTemplate : undefined }}"
				tagStyle="{{ gridColumn.TagCell ? tagStyle : undefined }}"
				editArrowTemplate="{{ editArrowTemplate }}"

				_isVisibleCheckbox="{{ (item || itemData).isVisibleCheckbox() }}"
				_itemMultiSelectClasses="{{ (item || itemData).getMultiSelectClasses(backgroundColorStyle, cursor, highlightOnHover, itemPadding, baseline) }}"
				_isReadonlyCheckbox="{{ (item || itemData).isReadonlyCheckbox() }}"
				_isSelected="{{ (item || itemData).isSelected() }}"
				_multiSelectContrastBackground="{{ (item || itemData).isMultiSelectContrastBackground() }}"
	>
		<ws:beforeContentTemplate>
			<!-- Экспандер узлов и отступ под экспандер у записей дерева выводится перед контентом ячейки. -->
			<!-- Рендер экспандера обязан быть внутри блока, который обеспечивает отступы, обводку редактируемой записи и -->
			<!-- другие визуальные решения, регулируемые опциями на шаблоне колонки. В противном случае возникают проблемы  -->
			<!-- например, опция cursor="default" на колонке не влияет на область, где расположен отступ под иерархию/экспандер. -->
			<ws:if data="{{(item || itemData).shouldDisplayExpanderBlock(column, expanderPaddingVisibility) && (item || itemData).shouldDisplayLevelPadding(withoutLevelPadding, withoutExpanderPadding)}}">
				<ws:for data="i in (item || itemData).getLevel() - 1">
					<div class="{{(item || itemData).getLevelIndentClasses(expanderSize, levelIndentSize)}}"></div>
				</ws:for>
			</ws:if>
			<ws:if data="{{(item || itemData).shouldDisplayExpanderBlock(column, expanderPaddingVisibility) && (item || itemData).shouldDisplayExpander(expanderIcon, 'default')}}">
				<div class="{{ (item || itemData).getExpanderClasses(expanderIcon, expanderSize, expanderIconSize, expanderIconStyle) }}"
					 attr:data-qa="{{ (item || itemData).listElementName }}-expander"></div>
			</ws:if>
			<ws:if
				data="{{(item || itemData).shouldDisplayExpanderBlock(column, expanderPaddingVisibility) && !(item || itemData).shouldDisplayExpander(expanderIcon, 'default') && (item || itemData).shouldDisplayExpanderPadding(expanderIcon, expanderSize, withoutExpanderPadding)}}">
				<div class="{{(item || itemData).getExpanderPaddingClasses(expanderSize)}}"></div>
			</ws:if>
		</ws:beforeContentTemplate>

		<ws:afterContentTemplate>
			<!-- Экспандер узлов дерева выводится после контента ячейки. -->
			<ws:if data="{{ (item || itemData).shouldDisplayExpanderBlock(gridColumn, expanderPaddingVisibility) && item.shouldDisplayExpander(expanderIcon, 'right') }}">
				<div class="{{ (item || itemData).getExpanderClasses(expanderIcon, expanderSize, expanderIconSize, expanderIconStyle) }}"
					 attr:data-qa="{{ (item || itemData).listElementName }}-expander"></div>
			</ws:if>
		</ws:afterContentTemplate>

		<ws:multiSelectTemplate>
			<ws:partial template="{{ (item || itemData).getMultiSelectTemplate() }}"
						contrastBackground="{{ (item || itemData).isMultiSelectContrastBackground() }}"

						_isVisibleCheckbox="{{ (item || itemData).isVisibleCheckbox() }}"
						_itemMultiSelectClasses="{{ (item || itemData).getMultiSelectClasses(backgroundColorStyle, cursor, highlightOnHover, itemPadding, baseline) }}"
						_isReadonlyCheckbox="{{ (item || itemData).isReadonlyCheckbox() }}"
						_isSelected="{{ (item || itemData).isSelected() }}"
			/>
		</ws:multiSelectTemplate>
	</ws:partial>

	<ws:if data="{{ gridColumn.SupportItemActions && gridColumn.shouldDisplayItemActions() }}">

		<ws:if data="{{ (item || itemData).isSwiped() && itemActionsPosition !== 'outside' }}">
			<ws:partial template="{{ swipeTemplate }}"
						highlightOnHover="{{ highlightOnHover }}"/>
		</ws:if>
		<ws:else data="{{ itemActionsPosition !== 'custom' }}">
			<ws:partial template="{{ itemActionsTemplate }}"
						itemData="{{ item || itemData }}"
						itemActionsClass="{{ itemActionsClass }}"
						highlightOnHover="{{ highlightOnHover }}"/>
		</ws:else>
	</ws:if>

	<ws:if data="{{ (gridColumn || itemData).Draggable && (gridColumn || itemData).shouldDisplayDraggingCounter() }}">
		<span class="controls-ListView__item-dragging-counter">{{ (item || itemData).getDraggedItemsCountString() }}</span>
	</ws:if>
</ws:template>

<ws:if data="{{ (item || itemData).isFullGridSupport() }}">
	<Controls.stickyBlock:StickyGroup position="{{(item || itemData).getStickyGroupPosition(stickyCallback)}}">
		<div attr:data-qa="{{ (item || itemData).listElementName }}"
			 attr:class="{{ (item || itemData).getItemClasses({
				   'highlightOnHover': highlightOnHover,
				   'cursor': cursor,
				   'clickable': clickable,
				   'showItemActionsOnHover': showItemActionsOnHover
			   }) }}">
			<ws:for data="column in (item || itemData).getColumnsFromEnumerator()">
				<ws:if data="{{ column.isStickied(isSticked) }}">
					<Controls.stickyBlock:StickyGroupedBlock position="{{ column.getStickyHeaderPosition(stickyCallback) }}"
												 mode="{{ column.getStickyHeaderMode(stickyCallback) }}"
												 shadowVisibility="{{column.shadowVisibility}}"
												 backgroundStyle="{{ column.getStickyBackgroundStyle() }}"
												 _isIosZIndexOptimized="{{ (item || itemData).isIosZIndexOptimized() }}"
												 fixedZIndex="{{ column.getZIndex()}}"
												 subPixelArtifactFix="{{ column.isNeedSubPixelArtifactFix(subPixelArtifactFix) }}"
												 pixelRatioBugFix="{{pixelRatioBugFix}}"
												 attr:key="sticky_{{ column.getInstanceId() }}"
												 attr:class="{{ column.getWrapperClasses(backgroundColorStyle, highlightOnHover, hoverBackgroundStyle, shadowVisibility, borderVisibility, borderStyle) }}"
												 attr:style="{{ column.getWrapperStyles(containerSize) }} {{ column.isHidden() ? 'ws-hidden' }}"
												 attr:data-qa="{{ column.listElementName }}">
						<ws:partial template="COLUMN" gridColumn="{{ column }}" if="{{ !column.isHidden() }}"/>
					</Controls.stickyBlock:StickyGroupedBlock>
				</ws:if>
				<ws:else>
					<div
						class="{{ column.getWrapperClasses(backgroundColorStyle, highlightOnHover, hoverBackgroundStyle, shadowVisibility, borderVisibility, borderStyle) }} {{ column.isHidden() ? 'ws-hidden' }}"
						style="{{ column.getWrapperStyles(containerSize) }}"
						attr:key="{{ column.getInstanceId() }}_wrapper"
						attr:data-qa="{{ column.listElementName }}">
						<ws:partial template="COLUMN" gridColumn="{{ column }}" if="{{ !column.isHidden() }}"/>
					</div>
				</ws:else>
			</ws:for>
		</div>
	</Controls.stickyBlock:StickyGroup>
</ws:if>
<ws:else>
	<ws:partial template="{{ 'Controls/treeGrid:ItemTemplate' }}" scope="{{ _options }}"/>
</ws:else>
