<ws:template name="headingPath">
   <div class="
      controls-Explorer__PathWrapper
      {{_options.backButtonIconViewMode === 'functionalButton' ? 'controls-Explorer__PathWrapper_offset-left'}}
   ">
      <ws:if data="{{_needCrumbs}}">
         <Controls.Container.Async templateName="Controls/breadcrumbs:HeadingPath">
            <ws:partial template="{{ content.resolvedTemplate }}"
                        scope="{{_options}}"
                        name="Path"
                        items="{{_options.breadCrumbsItems}}"
                        displayMode="{{_options.breadcrumbsDisplayMode}}"

                        withoutBackButton="{{_options.withoutBackButton}}"
                        backButtonIconViewMode="{{_options.backButtonIconViewMode}}"
                        backButtonBeforeCaptionTemplate="{{_options.backButtonBeforeCaptionTemplate}}"

                        pathButtonCaption="{{_options.breadcrumbsPathButtonCaption}}"
                        pathButtonSource="{{_options.pathButtonSource || _options.source}}"
                        pathButtonFilter="{{_options.filter}}"
                        pathButtonSorting="{{_options.sorting}}"
                        pathButtonNavigation="{{_options.navigation}}"
                        pathButtonKeyProperty="{{_options.keyProperty}}"
                        pathButtonNodeProperty="{{_options.nodeProperty}}"
                        pathButtonParentProperty="{{_options.parentProperty}}"
                        pathButtonDisplayProperty="{{_options.displayProperty}}"
                        pathButtonHasChildrenProperty="{{_options.hasChildrenProperty}}"

                        attr:class="controls-Explorer__Path"
                        on:backButtonClick="_notifyHandler('backButtonClick')"
                        on:hoveredItemChanged="_notifyHandler('hoveredItemChanged')"
                        on:arrowActivated="_notifyHandler('arrowActivated')"
                        on:itemClick="_notifyHandler('itemClick')"
                        on:itemMouseDown="_notifyHandler('itemMouseDown')"
                        on:arrowClick="_notifyHandler('arrowClick')"
            />
         </Controls.Container.Async>
      </ws:if>

      <ws:if data="{{_options.afterBreadCrumbsTemplate}}">
         <ws:partial
            template="{{_options.afterBreadCrumbsTemplate}}"
            attr:class="
               controls-Explorer__afterBreadCrumbsTemplate
               {{!_needCrumbs ? 'controls-Explorer__afterBreadCrumbsTemplate_width_full'}}
            "
         />
      </ws:if>
   </div>
</ws:template>

<ws:if data="{{!_needCrumbs && !_options.afterBreadCrumbsTemplate}}">
   <!-- нельзя использовать invisible-node. он ломает всплытие событий/-->
   <div style="display: none"></div>
</ws:if>
<ws:else>
   <ws:if data="{{_options.stickyHeader}}">
     <div class="controls-Explorer__HeadingPathWrapper">
       <Controls.stickyBlock:StickyGroup position="top">
         <Controls.stickyBlock:StickyGroupedBlock
             mode="stackable"
             shadowVisibility="{{_options.needShadow ? 'visible' : 'hidden'}}"
             fixedZIndex="{{5}}"
             position="left"
             attr:style="{{ _getBreadCrumbsWrapperStyles(_options) }}"
             subPixelArtifactFix="{{_options.subPixelArtifactFix}}"
             pixelRatioBugFix="{{_options.pixelRatioBugFix}}"
             backgroundStyle="{{ _options.backgroundStyle || _options.style }}"
             horizontalShadowVisibility="hidden"
             attr:class="controls-Explorer__HeadingPath-{{_options.style}}"
         >
           <ws:partial template="headingPath"/>
         </Controls.stickyBlock:StickyGroupedBlock>
       </Controls.stickyBlock:StickyGroup>
     </div>
   </ws:if>
   <ws:else>
      <ws:partial template="headingPath"/>
   </ws:else>
</ws:else>
